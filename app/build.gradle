plugins {
    id 'com.android.application'
}

android {
    namespace 'juloo.keyboard2'
    compileSdk 34

    defaultConfig {
        applicationId "juloo.keyboard2"
        minSdk 21 // required by AndroidX library
        targetSdkVersion 34
        versionCode 36
        versionName "1.24.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.emoji2:emoji2-emojipicker:1.4.0'
}

tasks.named("preBuild") {
    dependsOn += "buildKeyboardAssets"
}

tasks.register('buildKeyboardAssets') {
    dependsOn 'copyKeyboardFont'
    dependsOn 'buildKeyboardLayoutXml'
}

tasks.register('buildKeyboardFont') {
    println "Executing fontforge to build custom font\n"
    mkdir "$buildDir"
    new ByteArrayOutputStream().withStream { bos ->
        exec {
            workingDir "$projectDir/special_font"
            def svgFiles = workingDir.listFiles().findAll {
                it.isFile() && it.name.endsWith(".svg")
            }

            commandLine("fontforge", "-lang=ff", "-script", "build.pe", "$buildDir/special_font.ttf", *svgFiles)
            standardOutput = bos
        }
        println "$bos"
    }
}

tasks.register('copyKeyboardFont', Copy) {
    dependsOn 'buildKeyboardFont'
    from "$buildDir/special_font.ttf"
    into "src/main/assets"
}

tasks.register('buildKeyboardLayoutXml') {
    dependsOn 'checkKeyboardLayoutXml'
    println "Executing python script to generate keyboard layouts"
    new ByteArrayOutputStream().withStream { bos ->
        exec {
            workingDir = projectDir
            commandLine "python", "gen_layouts.py"
            standardOutput = bos
        }
        println "$bos"
    }
}

tasks.register('checkKeyboardLayoutXml') {
    println "Executing python script to check keyboard layouts\n"
    new ByteArrayOutputStream().withStream { bos ->
        exec {
            def layouts = new File(projectDir, "src/main/res/xml").listFiles().findAll {
                it.isFile() && it.name.endsWith(".xml")
            }
            workingDir = projectDir
            commandLine("python", "check_layout.py", *layouts)
            standardOutput = bos
        }

        new File(projectDir, "../check_layout.output").write(bos.toString())
    }
}

tasks.register('generateTranslationTemplates') {
    println "Executing python script to generate translation templates"
    new ByteArrayOutputStream().withStream { bos ->
        exec {
            workingDir = projectDir
            commandLine "python", "sync_translations.py"
            standardOutput = bos
        }
        println "$bos"
    }
}

tasks.named("clean") {
    dependsOn += "cleanKeyboardFont"
}

tasks.register('cleanKeyboardFont') {
    delete "src/main/assets/special_font.ttf"
}